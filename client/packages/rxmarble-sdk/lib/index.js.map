{"version":3,"sources":["marble-rxjs.ts"],"names":[],"mappings":";AA2HC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAhHD,IAAI,EAAY,WAAO,OAAA,YAAe,YAAY,MAAQ,KAAK,OAEzD,EAAA,WAAN,SAAA,IAAA,EAAA,KAAA,GAEI,KAAA,KAAmB,GA4GtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QA1GQ,MAAA,WAAU,KAAA,KAAO,KA0GzB,CAAA,IAAA,UAxGY,MAAA,SAAA,GACD,YAAmB,IAAnB,KAAK,KAAK,IACL,KAAA,KAAK,GAAS,EACZ,GAEJ,EAAQ,SAAS,KAAK,KAAK,QAmGzC,EA9GK,GAeA,EAA0B,IAAI,EAOpC,SAAgB,EAAU,EAAqB,GAIpC,OAFF,GAAK,EAAwB,QAE3B,SAAC,GAEJ,OAAA,EAAO,KAAM,SAA+B,GAElB,EAAO,UAAW,EAAkB,KAAM,GAAM,EAAc,EAAK,OAAe,IAEjG,OAAA,gBAcnB,SAAS,EAAqB,EAA0B,EAAW,GAE/D,QAAQ,MAAyB,kBAAA,OAAA,EAAkB,iBAAA,OAAA,EAAnD,QAEM,IAAA,EAAS,EAAwB,QAAS,GAE1C,EAAe,CACjB,KAAM,QACN,KAAM,IACN,GAAG,EACH,SAAS,EACT,KAAK,EACL,gBAAgB,EAChB,gBAAe,GAIZ,OAFP,OAAO,cAAe,IAAI,YAAY,kBAAmB,CAAE,OAAQ,KAE5D,CACH,KAAM,SAAC,GACH,EAAW,KAAK,GAEV,IAAA,EAAe,CACjB,KAAM,QACN,KAAM,IACN,GAAG,EACH,SAAS,EACT,KAAK,EACL,MAAO,GAEX,QAAQ,MAAoB,aAAA,OAAA,EAAkB,iBAAA,OAAA,EAA9C,QAEA,OAAO,cAAe,IAAI,YAAY,kBAAmB,CAAE,OAAQ,MAEvE,MAAO,SAAC,GACJ,EAAW,MAAM,GAEX,IAAA,EAAe,CACjB,KAAM,QACN,KAAM,IACN,GAAG,EACH,SAAS,EACT,KAAK,EACL,IAAI,GAER,QAAQ,MAAoB,aAAA,OAAA,EAAkB,iBAAA,OAAA,EAA9C,QAEA,OAAO,cAAe,IAAI,YAAY,kBAAmB,CAAE,OAAQ,MAEvE,SAAU,WACN,EAAW,WAEL,IAAA,EAAe,CACjB,KAAM,WACN,KAAM,IACN,GAAG,EACH,SAAS,EACT,KAAK,GAGT,QAAQ,MAAwB,iBAAA,OAAA,EAAkB,iBAAA,OAAA,EAAlD,QAEA,OAAO,cAAe,IAAI,YAAY,kBAAmB,CAAE,OAAQ,OArF/E,QAAA,MAAA","file":"index.js","sourceRoot":"..","sourcesContent":["import {  \n    Observable, \n    MonoTypeOperatorFunction,\n    PartialObserver,\n    Subscriber\n} from 'rxjs';\n\ninterface StreamsInfo {\n    [ id:string ]:number;\n}\n\nlet eventTime = () => (performance) ? performance.now() : Date.now() ;\n\nclass StreamNameManager {\n    \n    _ids:StreamsInfo = {}\n\n    reset() { this._ids = {} } \n\n    getName( theId:string ) {\n        if( this._ids[theId]===undefined ) {\n            this._ids[theId] = 0;\n            return theId;\n        }\n        return theId + String(++this._ids[theId]);\n    }\n}\n\nconst globalStreamNameManager = new StreamNameManager()\n\n/**\n * \n * @param idOrParentId \n * @param id \n */\nexport function watch<T>( idOrParentId:string, id?:string ):MonoTypeOperatorFunction<T> {\n\n    if( !id ) globalStreamNameManager.reset()\n\n    return (source:Observable<T>) =>  \n\n        source.lift( function (this: Subscriber<T>, source: Observable<T>) {\n\n            const subscription =  source.subscribe( observeAndNotify( this, id || idOrParentId, id ? idOrParentId : undefined ) );\n\n            return () => {\n                //console.debug( `unsubscribe( id='${id || idOrParentId}', parentId='${id ? idOrParentId : undefined}' )` );\n                //subscription.unsubscribe()\n            }\n        })\n}\n\n\n/**\n * \n * @param subscriber \n * @param id \n * @param parentId \n */\nfunction observeAndNotify<T>( subscriber:Subscriber<T>, id:string, parentId?:string ):PartialObserver<T> \n{\n    console.debug( `subscribe( id='${id}', parentId='${parentId}' )` );\n\n    const theId =  globalStreamNameManager.getName( id );\n\n    const event:Sample = {\n        type: 'Start',\n        time: eventTime(),\n        id:theId,\n        parentId:parentId,\n        name:theId,\n        createdByValue: true,\n        isIntermediate:false\n    };\n    window.dispatchEvent( new CustomEvent('rxmarbles.event', { detail: event } ));\n\n    return {\n        next: (v:T) => {\n            subscriber.next(v);\n\n            const event:Sample = {\n                type: 'Value',\n                time: eventTime(),\n                id:theId,\n                parentId:parentId,\n                name:theId,\n                value: v\n            };\n            console.debug( `next( id='${id}', parentId='${parentId}' )` );\n\n            window.dispatchEvent( new CustomEvent('rxmarbles.event', { detail: event } ));\n        },\n        error: (err:T) => {\n            subscriber.error(err);\n\n            const event:Sample = {\n                type: 'Error',\n                time: eventTime(),\n                id:theId,\n                parentId:parentId,\n                name:theId,\n                err:err\n            };\n            console.error( `next( id='${id}', parentId='${parentId}' )` );\n\n            window.dispatchEvent( new CustomEvent('rxmarbles.event', { detail: event } ));\n        },\n        complete: () => {\n            subscriber.complete();\n\n            const event:Sample = {\n                type: 'Complete',\n                time: eventTime(),\n                id:theId,\n                parentId:parentId,\n                name:theId\n            };\n\n            console.debug( `complete( id='${id}', parentId='${parentId}' )` );\n\n            window.dispatchEvent( new CustomEvent('rxmarbles.event', { detail: event } ));\n        }\n    }\n};\n\n"]}